openapi: 3.0.0
paths:
  /user:
    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInput'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        409:
          description: Conflict - Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400:
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieves a paginated list of all users
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
          description: Number of records to skip for pagination
        - name: take
          in: query
          schema:
            type: integer
            default: 10
          description: Number of records to take for pagination
      responses:
        200:
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  count:
                    type: integer
                    description: Total number of users
        400:
          description: Bad request - Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /user/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieves a specific user by their ID
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Users
      summary: Update user
      description: Update a specific user by their ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserInput'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Conflict - Email or phone number already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400:
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a specific user by their ID
      responses:
        204:
          description: User deleted successfully
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          description: User's role in the system
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
      required:
        - id
        - name
        - email
        - role

    CreateUserInput:
      type: object
      properties:
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          description: User's password
        role:
          type: string
          description: User's role in the system
      required:
        - name
        - email
        - password
        - role

    UpdateUserInput:
      type: object
      properties:
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
      required:
        - name
        - email

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string
          description: Error message
      required:
        - status
        - message

    ValidationError:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        errors:
          type: object
          properties:
            fieldErrors:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
            formErrors:
              type: array
              items:
                type: string
